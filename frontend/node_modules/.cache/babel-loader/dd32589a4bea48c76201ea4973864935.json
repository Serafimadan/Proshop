{"ast":null,"code":"import axios from 'axios';\nimport { ORDER_CREATE_REQUEST, ORDER_CREATE_SUCCESS, ORDER_CREATE_FAIL, ORDER_DETAILS_REQUEST, ORDER_DETAILS_SUCCESS, ORDER_DETAILS_FAIL } from '../constants/orderConstants';\nexport const createOrder = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_CREATE_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        'Content-Type': 'application/json',\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: ORDER_CREATE_SUCCESS,\n      payload: data\n    });\n    localStorage.removeItem('cartItems');\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: ORDER_CREATE_FAIL,\n      payload: message\n    });\n  }\n};\nexport const getOrderDetails = order => async (dispatch, getState) => {\n  try {\n    dispatch({\n      type: ORDER_DETAILS_REQUEST\n    });\n    const {\n      userLogin: {\n        userInfo\n      }\n    } = getState();\n    const config = {\n      headers: {\n        Authorization: `Bearer ${userInfo.token}`\n      }\n    };\n    const {\n      data\n    } = await axios.post(`/api/orders`, order, config);\n    dispatch({\n      type: ORDER_DETAILS_SUCCESS,\n      payload: data\n    });\n    localStorage.removeItem('cartItems');\n  } catch (error) {\n    const message = error.response && error.response.data.message ? error.response.data.message : error.message;\n    dispatch({\n      type: ORDER_DETAILS_FAIL,\n      payload: message\n    });\n  }\n};","map":{"version":3,"sources":["/Users/serafima/WWW/proshop/frontend/src/actions/orderAction.js"],"names":["axios","ORDER_CREATE_REQUEST","ORDER_CREATE_SUCCESS","ORDER_CREATE_FAIL","ORDER_DETAILS_REQUEST","ORDER_DETAILS_SUCCESS","ORDER_DETAILS_FAIL","createOrder","order","dispatch","getState","type","userLogin","userInfo","config","headers","Authorization","token","data","post","payload","localStorage","removeItem","error","message","response","getOrderDetails"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SACIC,oBADJ,EAEIC,oBAFJ,EAGIC,iBAHJ,EAIIC,qBAJJ,EAKIC,qBALJ,EAMIC,kBANJ,QAOO,6BAPP;AASA,OAAO,MAAMC,WAAW,GAAIC,KAAD,IAAW,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AAChE,MAAI;AACAD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEV;AADD,KAAD,CAAR;AAIA,UAAM;AACFW,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADT,QAEFH,QAAQ,EAFZ;AAIA,UAAMI,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACT,wBAAgB,kBADP;AAETC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AAF/B;AADE,KAAf;AAOA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAACmB,IAAN,CAAY,aAAZ,EAA0BX,KAA1B,EAAiCM,MAAjC,CAAvB;AAEAL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAET,oBADD;AAELkB,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AACC,GAxBL,CAwBM,OAAOC,KAAP,EAAc;AAChB,UAAMC,OAAO,GACTD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBM,OAAtC,GACED,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBM,OADtB,GAEED,KAAK,CAACC,OAHZ;AAKAf,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAER,iBADD;AAELiB,MAAAA,OAAO,EAAEI;AAFJ,KAAD,CAAR;AAIH;AACJ,CApCM;AAsCP,OAAO,MAAME,eAAe,GAAIlB,KAAD,IAAW,OAAOC,QAAP,EAAiBC,QAAjB,KAA8B;AACpE,MAAI;AACAD,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEP;AADD,KAAD,CAAR;AAIA,UAAM;AACFQ,MAAAA,SAAS,EAAE;AAAEC,QAAAA;AAAF;AADT,QAEFH,QAAQ,EAFZ;AAIA,UAAMI,MAAM,GAAG;AACXC,MAAAA,OAAO,EAAE;AACTC,QAAAA,aAAa,EAAG,UAASH,QAAQ,CAACI,KAAM;AAD/B;AADE,KAAf;AAMA,UAAM;AAAEC,MAAAA;AAAF,QAAW,MAAMlB,KAAK,CAACmB,IAAN,CAAY,aAAZ,EAA0BX,KAA1B,EAAiCM,MAAjC,CAAvB;AAEAL,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEN,qBADD;AAELe,MAAAA,OAAO,EAAEF;AAFJ,KAAD,CAAR;AAKAG,IAAAA,YAAY,CAACC,UAAb,CAAwB,WAAxB;AACC,GAvBL,CAuBM,OAAOC,KAAP,EAAc;AAChB,UAAMC,OAAO,GACTD,KAAK,CAACE,QAAN,IAAkBF,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBM,OAAtC,GACED,KAAK,CAACE,QAAN,CAAeP,IAAf,CAAoBM,OADtB,GAEED,KAAK,CAACC,OAHZ;AAKAf,IAAAA,QAAQ,CAAC;AACLE,MAAAA,IAAI,EAAEL,kBADD;AAELc,MAAAA,OAAO,EAAEI;AAFJ,KAAD,CAAR;AAIH;AACJ,CAnCM","sourcesContent":["import axios from 'axios';\nimport {\n    ORDER_CREATE_REQUEST,\n    ORDER_CREATE_SUCCESS,\n    ORDER_CREATE_FAIL,\n    ORDER_DETAILS_REQUEST,\n    ORDER_DETAILS_SUCCESS,\n    ORDER_DETAILS_FAIL,\n} from '../constants/orderConstants';\n\nexport const createOrder = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_CREATE_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n    \n        const config = {\n            headers: {\n            'Content-Type': 'application/json',\n            Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n    \n        const { data } = await axios.post(`/api/orders`, order, config)\n    \n        dispatch({\n            type: ORDER_CREATE_SUCCESS,\n            payload: data,\n        })\n\n        localStorage.removeItem('cartItems')\n        } catch (error) {\n        const message =\n            error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n        \n        dispatch({\n            type: ORDER_CREATE_FAIL,\n            payload: message,\n        })\n    }\n}\n\nexport const getOrderDetails = (order) => async (dispatch, getState) => {\n    try {\n        dispatch({\n            type: ORDER_DETAILS_REQUEST,\n        })\n\n        const {\n            userLogin: { userInfo },\n        } = getState()\n    \n        const config = {\n            headers: {\n            Authorization: `Bearer ${userInfo.token}`,\n            },\n        }\n    \n        const { data } = await axios.post(`/api/orders`, order, config)\n    \n        dispatch({\n            type: ORDER_DETAILS_SUCCESS,\n            payload: data,\n        })\n\n        localStorage.removeItem('cartItems')\n        } catch (error) {\n        const message =\n            error.response && error.response.data.message\n            ? error.response.data.message\n            : error.message\n        \n        dispatch({\n            type: ORDER_DETAILS_FAIL,\n            payload: message,\n        })\n    }\n}\n"]},"metadata":{},"sourceType":"module"}